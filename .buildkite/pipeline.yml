steps:

  # The order here is defined for fast feedback when breaking something.

  # -O0 builds come first for fast feedback.

  - label: (-O0) -A working
    command: |
      NIX_PATH=nixpkgs=nixpkgs nix-build --no-link survey/default.nix \
        --arg disableOptimization true -A working

  - label: (-O0) -A workingStackageExecutables
    command: |
      NIX_PATH=nixpkgs=nixpkgs nix-build --no-link survey/default.nix \
        --arg disableOptimization true -A workingStackageExecutables

  # Normal builds

  - label: -A working
    command: |
      NIX_PATH=nixpkgs=nixpkgs nix-build --no-link survey/default.nix \
        -A working

  - label: -A workingStackageExecutables
    command: |
      NIX_PATH=nixpkgs=nixpkgs nix-build --no-link survey/default.nix \
        -A workingStackageExecutables

  # integer-simple builds

  # Doesn't pass yet
  # - label: (integer-simple)
  #   command: |
  #     NIX_PATH=nixpkgs=nixpkgs nix-build --no-link survey/default.nix \
  #       --arg integer-simple true -A working -A workingStackageExecutables

  # Note on GHC versions:
  # It really only makes sense to test the compiler version matching the version
  # of Stackage that was the base for nixpkgs's `haskellPackages`.
  # Any other GHC version should be tested via `stack2nix` builds.

  # Other

  - label: stack2nix-example
    command: |
      cd static-stack2nix-builder-example/ && $(nix-build --no-link -A fullBuildScript)

  # Stack via stack2nix

  - label: static-stack
    command: |
      cd static-stack/
      mkdir -p static-stack-test-dir
      curl -L https://github.com/commercialhaskell/stack/archive/v2.1.3.tar.gz | tar -xz -C static-stack-test-dir
      # Use lts-12 because ghc822 is no longer in nixpkgs
      cp static-stack-test-dir/stack-*/stack-lts-12.yaml static-stack-test-dir/stack-*/stack.yaml
      $(nix-build --no-link -A fullBuildScript --argstr stackDir $PWD/static-stack-test-dir/stack-*)
